close all
clear
clc

%% Real scan data
X_points=[2.174736, 2.119849, 2.068342, 2.021085, 1.977339, 1.936348, 1.917021, 1.927064, 1.937089, 1.947095, 1.957081, 1.967885, 1.977833, 1.987759, 1.998509, 2.133065, 2.069228, 2.011702, 1.959019, 1.911267, 1.919604, 1.929518, 1.938614, 1.947691, 1.957559, 1.966596, 1.976431, 1.986251, 1.995227, 2.167722, 1.915032, 1.922388, 1.929725, 1.937761, 1.945060, 1.953067, 1.960328, 1.968304, 1.976266, 1.984214, 1.991396, 1.911840, 1.918355, 1.924283, 1.930762, 1.937225, 1.943084, 1.949510, 1.955918, 1.962310, 1.968684, 1.975040, 1.981379, 1.987699, 1.994000, 1.915254, 1.920847, 1.926414, 1.931955, 1.937470, 1.942959, 1.948421, 1.953857, 1.959266, 1.965045, 1.970405, 1.975738, 1.981458, 1.986741, 1.992422, 1.998950, 2.043101, 2.095759, 2.159899, 1.915190, 1.920968, 1.926705, 1.932403, 1.938136, 1.943759, 1.949342, 1.954884, 1.960486, 1.965951, 1.971489, 1.976879, 1.982352, 1.987664, 1.993071, 1.998738, 2.006507, 2.014758, 2.023039, 2.031669, 2.040665, 2.050047, 2.059644, 2.069650, 2.079881, 2.090751, 2.101870, 2.113456, 2.125527, 2.138100, 2.151429, 2.165064, 2.179503, 2.194270, 2.167589, 2.175177, 2.182928, 2.190861, 2.156200, 2.160868, 2.165597, 2.170386, 2.175236, 2.180146, 2.184390, 2.189424, 2.194518, 2.001921, 2.005779, 2.009681, 2.013625, 2.017612, 2.021642, 2.025714, 2.029828, 2.033137, 2.037339, 2.041582, 2.045030, 2.049360, 2.052901, 2.057317, 2.060950, 2.065452, 2.069178, 2.072951, 2.076773, 2.081447, 2.085360, 2.089320, 2.093328, 2.097382, 2.101484, 2.104851, 2.109051, 2.113297, 2.117591, 2.121164, 2.125555, 2.129234, 2.133721, 2.137505, 2.141343, 2.145977, 2.149920, 2.153917, 2.157969, 2.162074, 2.166234, 2.170448, 2.174716, 2.179038, 2.183414, 2.187844, 2.191634, 2.196176, 2.001442, 2.005556, 2.008757, 2.012944, 2.016221, 2.020479, 2.023831, 2.027220, 2.030648, 2.035047, 2.038547, 2.042085, 2.045659, 2.049270, 2.052918, 2.056602, 2.059405, 2.063163, 2.066958, 2.070787, 2.073745, 2.077648, 2.081586, 2.084659, 2.088668, 2.091818, 2.095008, 2.099125, 2.102391, 2.105696, 2.109040, 2.113299, 2.116718, 2.120175, 2.123672, 2.127206, 2.130779, 2.134389, 2.138038, 2.140874, 2.144602, 2.148367, 2.152169, 2.155172, 2.159053, 2.162140, 2.166097, 2.169269, 2.173303, 2.176558, 2.179857, 2.184008, 2.187390, 2.190815, 2.194283, 2.197795, 2.001354, 2.005676, 2.009039, 2.013442, 2.016886, 2.020371, 2.024891, 2.028454, 2.032055, 2.035695, 2.039374, 2.043089, 2.046842, 2.049640, 2.053468, 2.057331, 2.061231, 2.064177, 2.068148, 2.071166, 2.075207, 2.078298, 2.081424, 2.085567, 2.088763, 2.091993, 2.095258, 2.098558, 2.101891, 2.105258, 2.108659, 2.112093, 2.115560, 2.119059, 2.121624, 2.125189, 2.128786, 2.131453, 2.135115, 2.138807, 2.141574, 2.144374, 2.148161, 2.151027, 2.153927, 2.157807, 2.160770, 2.163767, 2.166796, 2.169858, 2.172952, 2.176078, 2.179235, 2.182425, 2.185646, 2.188898, 2.192181, 2.195495, 2.197922, 2.147224, 2.150244, 2.153300, 2.157393, 2.160523, 2.163688, 2.166889, 2.170126, 2.173397, 2.176703, 2.180043, 2.183417, 2.186824, 2.189267, 2.192741, 2.196247, 2.006700, 2.029202, 2.049533, 2.068954, 2.087434, 2.104272, 2.120097, 2.135560, 2.149960, 2.163267, 2.176146, 2.188579, 2.047716, 2.091336, 2.128438, 2.161126, 2.189256, 2.183887, 2.156583, 2.127110, 2.094222, 2.058453, 2.017909, 1.972490, 1.921474, 2.196204, 2.190267, 2.183986, 2.177614, 2.170875, 2.164320, 2.157385, 2.150351, 2.143217, 2.135675, 2.128023, 2.120261, 2.112390, 2.104077, 2.095645, 2.086748, 2.078071, 2.068921, 2.059278, 2.049496, 2.039574, 2.029134, 2.018159, 2.007023, 1.995729, 1.983873, 1.971849, 1.958827, 1.945616, 1.932217, 1.918198, 2.068966, 2.063997, 2.058953, 2.053853, 2.048690, 2.043435, 2.038105, 2.032744, 2.027273, 2.021727, 2.016046, 2.010348, 2.004576, 1.998651, 1.992729, 1.986640, 1.980467, 1.974211, 1.967757, 1.961327, 1.954689, 1.948086, 1.941264, 1.934347, 1.927336, 1.920075, 1.912708, 2.007560, 1.999010, 1.989466, 1.980819, 1.972123, 1.963380, 1.953655, 1.944820, 1.936871, 1.927943, 1.918972, 1.919192, 2.197814, 2.187863, 2.177854, 2.167790, 2.157670, 2.148477, 2.138250, 2.128948, 2.119592, 2.110184, 2.100724, 2.091213, 2.081652, 2.072043, 2.063352, 2.054611, 2.044856, 2.036018, 2.027132, 2.018199, 2.009220, 2.001150, 1.992078, 1.983914, 1.974753, 1.966497, 1.958196, 1.949849, 1.941459, 1.933024, 1.924547, 1.916028, 1.941028, 2.191869, 2.181543, 2.170147, 2.159682, 2.148150, 2.137550, 2.126885, 2.117153, 2.106360, 2.096502, 2.085586, 2.075606, 2.065566, 2.056463, 2.046307, 2.037088, 2.026820, 2.017489, 2.008104, 1.999655, 1.990163, 1.980619, 1.972011, 1.963351, 1.953656, 1.944897, 1.936089, 1.928214, 1.919309, 1.915251, 1.945342, 1.975281, 1.948638, 1.938613, 1.928523, 1.918370, 1.917153, 1.935863, 1.954502, 1.974065, 1.994550, ];
Y_points=[1.520329, 1.463523, 1.410421, 1.361540, 1.316212, 1.273788, 1.247375, 1.241666, 1.235869, 1.229982, 1.224007, 1.218489, 1.212330, 1.206083, 1.200277, 1.478837, 1.412970, 1.353513, 1.299113, 1.249672, 1.243662, 1.238779, 1.233217, 1.227578, 1.222443, 1.216644, 1.211340, 1.205948, 1.199907, 1.514696, 1.246999, 1.242429, 1.237805, 1.233819, 1.229080, 1.224971, 1.220118, 1.215885, 1.211588, 1.207227, 1.202141, 1.248500, 1.245254, 1.241144, 1.237814, 1.234438, 1.230210, 1.226750, 1.223247, 1.219699, 1.216107, 1.212472, 1.208793, 1.205070, 1.201304, 1.246758, 1.243616, 1.240441, 1.237233, 1.233994, 1.230721, 1.227417, 1.224081, 1.220713, 1.218232, 1.214799, 1.211335, 1.208750, 1.205222, 1.202568, 1.201682, 1.278087, 1.369209, 1.480260, 1.246378, 1.243063, 1.239713, 1.236328, 1.233906, 1.230452, 1.226965, 1.223444, 1.220885, 1.217299, 1.214673, 1.211022, 1.208331, 1.204616, 1.201860, 1.201052, 1.214049, 1.228958, 1.242812, 1.257584, 1.273269, 1.289861, 1.306373, 1.323784, 1.341108, 1.360300, 1.379396, 1.399369, 1.420213, 1.441921, 1.465457, 1.488869, 1.514093, 1.539181, 1.493493, 1.506467, 1.519392, 1.533267, 1.471799, 1.480093, 1.488368, 1.496621, 1.504854, 1.513065, 1.521942, 1.530114, 1.538263, 1.205949, 1.212811, 1.219649, 1.226463, 1.233251, 1.240015, 1.246753, 1.253465, 1.260682, 1.267347, 1.273986, 1.281144, 1.287734, 1.294854, 1.301394, 1.308474, 1.314964, 1.322003, 1.329023, 1.336025, 1.342414, 1.349372, 1.356311, 1.363229, 1.370127, 1.377005, 1.384484, 1.391324, 1.398142, 1.404939, 1.412355, 1.419112, 1.426497, 1.433212, 1.440564, 1.447903, 1.454555, 1.461858, 1.469146, 1.476418, 1.483673, 1.490911, 1.498132, 1.505335, 1.512520, 1.519687, 1.526835, 1.534684, 1.541798, 1.205550, 1.211803, 1.218333, 1.224516, 1.230988, 1.237100, 1.243512, 1.249897, 1.256255, 1.262229, 1.268526, 1.274794, 1.281035, 1.287247, 1.293431, 1.299586, 1.306109, 1.312212, 1.318284, 1.324327, 1.330761, 1.336750, 1.342709, 1.349074, 1.354977, 1.361298, 1.367599, 1.373420, 1.379674, 1.385909, 1.392122, 1.397832, 1.403997, 1.410141, 1.416262, 1.422362, 1.428439, 1.434494, 1.440526, 1.447061, 1.453052, 1.459019, 1.464963, 1.471429, 1.477330, 1.483764, 1.489620, 1.496020, 1.501831, 1.508196, 1.514544, 1.520289, 1.526601, 1.532896, 1.539175, 1.545437, 1.205332, 1.212009, 1.218690, 1.225267, 1.231861, 1.238415, 1.244846, 1.251311, 1.257735, 1.264118, 1.270459, 1.276758, 1.283014, 1.289354, 1.295532, 1.301667, 1.307759, 1.313959, 1.319970, 1.326101, 1.332031, 1.338093, 1.344122, 1.349932, 1.355891, 1.361817, 1.367711, 1.373571, 1.379399, 1.385193, 1.390954, 1.396681, 1.402375, 1.408034, 1.413914, 1.419510, 1.425072, 1.430872, 1.436371, 1.441833, 1.447552, 1.453248, 1.458616, 1.464258, 1.469876, 1.475148, 1.480711, 1.486250, 1.491763, 1.497252, 1.502715, 1.508153, 1.513565, 1.518952, 1.524312, 1.529646, 1.534954, 1.540236, 1.545888, 1.456907, 1.462850, 1.468756, 1.474604, 1.480427, 1.486211, 1.491956, 1.497662, 1.503329, 1.508957, 1.514544, 1.520092, 1.525600, 1.531149, 1.536582, 1.541975, 1.218204, 1.256836, 1.292125, 1.325618, 1.357336, 1.386559, 1.414060, 1.440594, 1.465443, 1.488629, 1.510898, 1.532258, 1.283816, 1.359385, 1.423708, 1.480182, 1.528898, 1.530306, 1.501958, 1.471523, 1.437444, 1.400574, 1.358595, 1.311591, 1.258867, 1.543138, 1.537478, 1.530904, 1.524382, 1.516954, 1.510543, 1.503232, 1.495980, 1.488790, 1.480712, 1.472700, 1.464756, 1.456882, 1.448136, 1.439465, 1.429932, 1.421417, 1.412048, 1.401832, 1.391706, 1.381672, 1.370806, 1.359117, 1.347534, 1.336059, 1.323777, 1.311611, 1.297741, 1.284002, 1.270393, 1.256015, 1.411631, 1.406645, 1.400691, 1.395770, 1.390881, 1.385026, 1.379206, 1.374420, 1.368670, 1.362956, 1.356282, 1.350645, 1.345045, 1.338489, 1.332970, 1.326495, 1.320064, 1.313676, 1.306339, 1.300041, 1.292796, 1.286592, 1.279444, 1.272347, 1.265300, 1.257318, 1.249390, 1.348418, 1.338806, 1.329609, 1.320170, 1.310815, 1.301545, 1.292713, 1.283618, 1.274241, 1.265310, 1.256465, 1.243868, 1.545730, 1.535211, 1.524804, 1.514510, 1.504328, 1.494060, 1.484099, 1.474039, 1.464082, 1.454226, 1.444472, 1.434821, 1.425272, 1.415827, 1.406230, 1.396724, 1.387576, 1.378260, 1.369035, 1.359903, 1.350863, 1.341619, 1.332758, 1.323682, 1.315002, 1.306095, 1.297270, 1.288526, 1.279865, 1.271287, 1.262790, 1.254377, 1.233019, 1.539186, 1.527612, 1.516204, 1.504893, 1.493761, 1.482714, 1.471797, 1.460941, 1.450278, 1.439665, 1.429257, 1.418887, 1.408636, 1.398398, 1.388381, 1.378364, 1.368581, 1.358787, 1.349102, 1.339383, 1.329910, 1.320546, 1.311130, 1.301812, 1.292766, 1.283650, 1.274632, 1.265520, 1.256694, 1.246940, 1.229818, 1.212305, 1.286957, 1.276659, 1.266487, 1.256441, 1.246302, 1.235561, 1.224583, 1.213326, 1.201771, ];

%% Parameters
robot_poses = [0 1 0;
               1 2 -pi/2;
               1 0 pi/2;
               2 1 -pi];
maxDistance = 2.5;
resol = 0.36;
field_of_view = 180;
theta_noise = 0.000;
r_noise = 0.001;

x = 2;
y = 1.2;
theta = pi/3;
x_assume = 0.0;
y_assume = 0.0;
theta_assume=0;
poseRelBox = [-x_assume, -y_assume, -theta_assume];
A = [cos(-theta_assume) -sin(-theta_assume);
     sin(-theta_assume) cos(-theta_assume)];
poseRelBox(1:2) = A*poseRelBox(1:2)';
poseRelBox = poseRelBox';
xmin = -0.5;
xmax = 0.5;
ymin = -0.5;
ymax = 0.5;

poseCov = diag([0.5, 0.5, 0.5]);

obj1 = [-0.2 -0.075;
        0.2 -0.075;
        0.2 0.075;
        -0.2 0.075];
obj2 = [-0.15 -0.1;
        0.15 -0.1;
        0.15 0.1;
        -0.15 0.1];
obj3 = [0 0;
        0.4 0;
        0 0.1];
obj4 = [0 0;
        0.3 0;
        0 0.15];
    
obj1_param = [0 .2;
              pi/2 .075;
              -pi 0.2;
              -pi/2 0.075];
          
obj3_param = [0 0;
              pi/2 0;
              pi/2-atan2(0.1,0.4) 0.4*sin(atan2(0.1,0.4))];
          
worldLines = obj1_param';
          
%% globals
global varAlpha;
global varR;
global lsrRelPose;
varAlpha = 0.001;
varR = 0.001;
lsrRelPose = [0, 0, 0];

%% Translate object
translated_object = translateObject(obj3, x, y, theta);
figure(1)
drawObject(translated_object);
hold on

%% Scan object from multiple views
lines = [translated_object([1:end],:), translated_object([2:end,1],:)];
scan_total = [];

for poseIdx = 1:size(robot_poses,1)
    theta_robot = robot_poses(poseIdx,3);
    A = [cos(theta_robot) -sin(theta_robot);
         sin(theta_robot) cos(theta_robot)];
    scan = laserscanHighresol(robot_poses(poseIdx,1), robot_poses(poseIdx,2), robot_poses(poseIdx,3), lines', maxDistance, resol,field_of_view);
    r_noise_samples = normrnd(0,r_noise,1,size(scan,2));
    theta_noise_samples = normrnd(0,theta_noise,1,size(scan,2));
    scan_noisy = scan + [theta_noise_samples;r_noise_samples];
    scan_cart = polar2carth(scan_noisy);
    scan_world = A*scan_cart + robot_poses(poseIdx,1:2)';
    scan_total(:,size(scan_total,2)+1:size(scan_total,2)+size(scan_world,2)) = scan_world;
end


scan_box_index = scan_total(1,:) <=x+xmax & scan_total(1,:) >=x+xmin & scan_total(2,:) <=y+ymax & scan_total(2,:) >=y+ymin;
scan_box = scan_total(:,scan_box_index);
% scatter(scan_total(1,:), scan_total(2,:))

%% Load real data
scan_box = [X_points; Y_points];
scatter(scan_box(1,:), scan_box(2,:));

%% Run ransac
ransac_params = [4, 30000, 0.01, 30, 10];
box_lines = ransacLines(scan_box, ransac_params);

numlines = size(box_lines,2);
figure(3)
for idx=1:size(box_lines,2)
    plotLine(box_lines(:,idx), 'r', '-')
    hold on
end

drawObject(translated_object);
scatter(scan_box(1,:), scan_box(2,:));

%% Find object corners
numBoxLines = size(box_lines,2);
intersectPoints = zeros(2,numBoxLines);
cornerCount = 1;
for idx=1:numBoxLines-1
    for jdx=idx+1:numBoxLines
        A = [cos(box_lines(1,idx)) sin(box_lines(1,idx));
             cos(box_lines(1,jdx)) sin(box_lines(1,jdx))];
        b = box_lines(2,[idx, jdx])';
        intersect = A\b;
        if(intersect(1) > 0 && intersect(1) < 10 && intersect(2) > 0 && intersect(2) < 10)
            intersectPoints(:,cornerCount) = intersect;
            cornerCount = cornerCount + 1;
        end
    end
end
cornerCount = cornerCount - 1;
%% Match object type and find pose
if cornerCount > 3
    pose = mean(intersectPoints,2);
    c1 = intersectPoints(:,1);
    c2s = intersectPoints(:,2:end);
    dists = sqrt(sum((c2s-c1).^2));
    [sortedDists,distIndex] = sort(dists);
    c2 = c2s(:,distIndex(2));
    side = c2 - c1;
    pose(3) = atan2(side(2),side(1));
    if sortedDists(1) > 0.175
        objectType = 2;
    else
        objectType = 1;
    end
else
    minCorner = 1000;
    minCornerIdx = 0;
    for idx=1:cornerCount
        c1 = intersectPoints(:,idx);
        c2s = intersectPoints(:,1:end ~= idx);
        sides = c2s - c1;
        dists = sqrt(sum(sides.^2));
        corner = dot(sides(:,1), sides(:,2));
        if corner < minCorner
            minCorner = corner;
            minCornerIdx = idx;
            [~,sideIndex] = max(dists);
            c2 = c2s(:,sideIndex);
        end
    end
    c1 = intersectPoints(:,minCornerIdx);
    side = c2 - c1;
    angle = atan2(side(2),side(1));
    pose = [c1; angle];
    if sqrt(sum(side.^2)) > 0.35
        objectType = 3;
    else
        objectType = 4;
    end
end

%% Plot matching result
figure(3)
scatter(pose(1), pose(2),50, 'b', 'filled');
arrowSize = 0.1;
arrowEnd = [cos(pose(3));sin(pose(3))]*arrowSize;
quiver(pose(1), pose(2), arrowEnd(1), arrowEnd(2), 0, 'b', 'LineWidth', 3);
title("Detected object " + objectType);
axis([1 3 1 2]);
%% Match line parameters
% numWorldLines = size(worldLines,2);
% numBoxLines = size(box_lines,2);
% % numBoxLines = 4;
% indexes = 1:numWorldLines;
% permutations = perms(indexes);
% minError = 1e10;
% minErrorPose = [0;0;0];
% lineRWeight = 1;
% lineAlphaWeight = 1;
% 
% alpha = box_lines(1,:);
% r = box_lines(2,:);
% 
% A = [cos(alpha)' sin(alpha)'];
% b = r';
% box_center = (A'*A)\A'*b;
% 
% [box_centered_alpha, box_centered_r] = lineTransform(box_lines(1,:), box_lines(2,:), -box_center(1), -box_center(2),0);
% box_centered = [box_centered_alpha; box_centered_r];
% % Old least squares fitting entire pose at once
% [~, box_centered_sorted_index] = sort(box_centered(2,:));
% box_centered_sorted = box_centered(:,box_centered_sorted_index);
% 
% box_angle = box_centered_sorted(1,3);

%% Transform object using calculated pose
% figure(3)
% % worldLaser = zeros(size(worldLines));
% % worldLaser_cov = zeros(2, 2, size(worldLines,2));
% [worldLaser_a, worldLaser_r] = lineTransform(worldLines(1,:), worldLines(2,:), box_center(1), box_center(2), box_angle);
% worldLaser = [worldLaser_a; worldLaser_r];
% for ldx=1:size(worldLines,2)
%         
% %         worldLaser(:ldx) = [worldLaser
% %         [worldLaser(:,ldx), worldLaser_cov(:,:,ldx)] = projectToLaser(worldLines(:,ldx),[box_center; box_angle], poseCov);
%         %sigmaIN_inv(:,:,ldx) = inv(worldLaser_cov(:,:,ldx) + R);
%         plotLine(worldLaser(:,ldx), 'm', '--');
% end
% axis([0.5 1.5 0.5 1.5]);

%% Plot parameter space
% figure(4)
% scatter(box_lines(1,:), box_lines(2,:));
% hold on
% scatter(worldLaser(1,:), worldLaser(2,:));
% xlabel('alpha [rad]')
% ylabel('r [m]');
% grid on
% legend("ransac", "obj map")

% figure(5);
% for idx=1:100
%     matches = match(poseRelBox', poseCov, worldLines, box_lines);
%     numMatches = 0;
%     for mIdx=1:size(matches,2)
%         if(matches(5,mIdx) > 0)
%             numMatches = numMatches+1;
%         end
%     end
%     numMatches
% 
%     [newPose, newPoseCov] = measurementUpdate(poseRelBox, poseCov, matches);
%     poseRelBox = newPose;
%     poseCov = newPoseCov*10;
%     worldLaser = zeros(size(worldLines));
%     worldLaser_cov = zeros(2, 2, size(worldLines,2));
%     
%     if(mod(idx,10) == 0)
%         clf
%         hold on
%         for ldx=1:size(worldLines,2)
%                 [worldLaser(:,ldx), worldLaser_cov(:,:,ldx)] = projectToLaser(worldLines(:,ldx),poseRelBox, poseCov);
%                 %sigmaIN_inv(:,:,ldx) = inv(worldLaser_cov(:,:,ldx) + R);
%                 plotLine(worldLaser(:,ldx), 'm', '--');
%         end
%         for laserIdx=1:size(box_lines,2)
%             plotLine(box_lines(:,laserIdx), 'r', '-');
%         end
%     end
% end
% 
% figure(6)
% scatter(box_lines(1,:), box_lines(2,:));
% hold on
% scatter(worldLaser(1,:), worldLaser(2,:));
% xlabel('alpha [rad]')
% ylabel('r [m]');
% grid on
% legend("ransac", "obj map")